# Nettacker - أداة فحص الشبكات المتقدمة

## نبذة عن الأداة

Nettacker هي أداة فحص شبكات متقدمة مستوحاة من OWASP Nettacker. تم تطويرها لمساعدة المختبرين والمدققين في عمليات تقييم أمان الشبكات وتطبيقات الويب. تتميز الأداة بواجهة سهلة الاستخدام وقدرات متعددة للفحص والاختبار.

## المميزات الرئيسية

- فحص المنافذ المفتوحة على الأنظمة المستهدفة
- كشف الثغرات الأمنية المحتملة
- تحليل الخدمات المشغلة على المنافذ
- فحص تطبيقات الويب باستخدام Wapiti
- اكتشاف المسارات والملفات المخفية
- فحص متقدم للمسارات باستخدام dirsearch (قوة مدمرة في اكتشاف المسارات المخفية)
- فحص شامل للمسارات باستخدام Gobuster (قوة مدمرة جداً في اكتشاف المسارات والملفات المخفية)
- إمكانية حفظ النتائج في ملفات نصية
- واجهة سطر أوامر سهلة الاستخدام
- لوقو تفاعلي مميز

## متطلبات النظام

- نظام تشغيل: Windows, Linux, أو macOS
- Python 3.6 أو أحدث
- اتصال بالإنترنت (للتثبيت وبعض عمليات الفحص)
- مساحة تخزين: 50 ميجابايت على الأقل

## المكتبات المطلوبة

- argparse>=1.4.0
- textwrap3>=0.9.2
- requests>=2.28.0
- colorama>=0.4.6
- scapy>=2.5.0
- bs4>=0.0.1
- beautifulsoup4>=4.11.0
- tqdm>=4.65.0

## خطوات التثبيت

### 1. تثبيت Python

تأكد من تثبيت Python 3.6 أو أحدث على نظامك. يمكنك تحميل Python من الموقع الرسمي:
https://www.python.org/downloads/

للتحقق من إصدار Python المثبت، قم بتنفيذ الأمر التالي في موجه الأوامر أو الطرفية:

```
python --version
```
أو
```
python3 --version
```

### 2. تنزيل Nettacker

يمكنك تنزيل Nettacker بإحدى الطرق التالية:

#### باستخدام Git:

```
git clone https://github.com/SayerLinux/Nettacker.git
cd Nettacker
```

#### التنزيل المباشر:

- قم بزيارة صفحة المشروع على GitHub: https://github.com/SayerLinux/Nettacker
- انقر على زر "Code" ثم اختر "Download ZIP"
- قم بفك ضغط الملف المحمل
- انتقل إلى مجلد Nettacker باستخدام موجه الأوامر أو الطرفية

### 3. تثبيت المكتبات المطلوبة

بعد الانتقال إلى مجلد Nettacker، قم بتنفيذ الأمر التالي لتثبيت جميع المكتبات المطلوبة:

```
pip install -r requirements.txt
```
أو
```
pip3 install -r requirements.txt
```

### 4. التحقق من التثبيت

للتأكد من نجاح التثبيت، قم بتنفيذ الأمر التالي لعرض قائمة المساعدة:

```
python nettacker.py -h
```
أو
```
python3 nettacker.py -h
```

## طريقة الاستخدام

### الصيغة العامة للأمر

```
python nettacker.py -H <الهدف> -p <المنافذ> -m <طريقة_الفحص> [خيارات_إضافية]
```

### الخيارات المتاحة

#### خيارات عامة
- `-H, --host`: عنوان الهدف المراد فحصه (اسم نطاق أو عنوان IP)
- `-p, --ports`: المنافذ المراد فحصها (مفصولة بفواصل أو نطاق مثل 80,443 أو 1-100)
- `-m, --method`: طريقة الفحص (vuln, port, service, dir, wapiti, dirsearch, gobuster, all)
- `-o, --output`: حفظ النتائج في ملف
- `-v, --verbose`: تفعيل وضع التفاصيل الكاملة
- `-t, --timeout`: مهلة الاتصال بالثواني (الافتراضي: 3)
- `--threads`: عدد مسارات الفحص المتزامنة (الافتراضي: 10)

#### خيارات اللوقو
- `--no-logo`: تعطيل عرض اللوقو عند بدء البرنامج
- `--show-logo-only`: عرض اللوقو فقط ثم الخروج من البرنامج (مفيد لعرض اللوقو التفاعلي)

#### خيارات فحص Wapiti
- `--wapiti-timeout`: مهلة فحص Wapiti بالثواني (الافتراضي: 300)

#### خيارات فحص dirsearch
- `--dirsearch-wordlist`: مسار ملف قائمة الكلمات لفحص dirsearch
- `--dirsearch-extensions`: امتدادات الملفات للبحث عنها في فحص dirsearch (مثال: php,asp,html)
- `--dirsearch-threads`: عدد مسارات الفحص المتزامنة لـ dirsearch (الافتراضي: 10)
- `--dirsearch-timeout`: مهلة فحص dirsearch بالثواني (الافتراضي: 30)

#### خيارات فحص Gobuster
- `--gobuster-wordlist`: مسار ملف قائمة الكلمات لفحص Gobuster
- `--gobuster-extensions`: امتدادات الملفات للبحث عنها في فحص Gobuster (مثال: php,asp,html,txt,bak,config)
- `--gobuster-threads`: عدد مسارات الفحص المتزامنة لـ Gobuster (الافتراضي: 20)
- `--gobuster-timeout`: مهلة فحص Gobuster بالثواني (الافتراضي: 30)

## أمثلة الاستخدام

### فحص المنافذ

```
# فحص منفذ محدد
python nettacker.py -H target.com -p 80 -m port -v

# فحص نطاق من المنافذ
python nettacker.py -H target.com -p 1-100 -m port -v
```

### فحص المسارات والملفات المخفية

```
# فحص المسارات المخفية الأساسي
python nettacker.py -H target.com -p 80,443 -m dir -v

# فحص متقدم للمسارات باستخدام dirsearch
python nettacker.py -H target.com -p 80,443 -m dirsearch --dirsearch-extensions php,asp,html -v

# فحص شامل للمسارات باستخدام Gobuster
python nettacker.py -H target.com -p 80,443 -m gobuster --gobuster-extensions php,html,txt,bak,config -v

# فحص Gobuster مع تحديد عدد العمليات المتزامنة ومهلة الانتظار وقائمة كلمات مخصصة
python nettacker.py -H target.com -p 80,443 -m gobuster --gobuster-threads 30 --gobuster-timeout 60 --gobuster-wordlist /path/to/wordlist.txt -v
```

### فحص الثغرات

```
# فحص الثغرات الأساسي
python nettacker.py -H target.com -p 80,443 -m vuln -v
```

### الفحص الشامل

```
# فحص شامل (يتضمن فحص المنافذ، الخدمات، المسارات، الثغرات، Wapiti، dirsearch، وGobuster)
python nettacker.py -H target.com -p 80,443 -m all -o results.txt -v --dirsearch-extensions php,asp,html --gobuster-extensions php,txt,bak,config --wapiti-timeout 600
```

### خيارات اللوقو

```
# عرض اللوقو التفاعلي فقط (مفيد لعرض اللوقو الجديد في المتصفح)
python nettacker.py --show-logo-only

# تشغيل الفحص بدون عرض اللوقو
python nettacker.py -H target.com -p 80,443 -m all --no-logo -v
```

## نصائح وإرشادات

1. **استخدم الأداة بمسؤولية**: تأكد من أن لديك إذن لفحص الأنظمة المستهدفة. استخدام الأداة على أنظمة غير مصرح بفحصها قد يكون غير قانوني.

2. **ابدأ بفحص المنافذ**: قبل إجراء فحوصات متقدمة، من المفيد معرفة المنافذ المفتوحة أولاً باستخدام `-m port`.

3. **استخدم وضع التفاصيل**: استخدم خيار `-v` للحصول على معلومات أكثر تفصيلاً أثناء عملية الفحص.

4. **حفظ النتائج**: استخدم خيار `-o` لحفظ نتائج الفحص في ملف للرجوع إليها لاحقاً.

5. **ضبط عدد مسارات الفحص**: يمكنك زيادة سرعة الفحص باستخدام خيار `--threads` مع مراعاة أن زيادة العدد قد تؤثر على استقرار الاتصال.

6. **تخصيص قوائم الكلمات**: للحصول على نتائج أفضل في فحص المسارات، استخدم قوائم كلمات مخصصة مع خيارات `--dirsearch-wordlist` أو `--gobuster-wordlist`.

## استكشاف الأخطاء وإصلاحها

1. **مشكلة في التثبيت**: تأكد من تثبيت Python بشكل صحيح وأن لديك الإصدار المناسب (3.6+).

2. **خطأ في المكتبات**: إذا واجهت مشاكل مع المكتبات، حاول تثبيتها بشكل منفصل:
   ```
   pip install argparse textwrap3 requests colorama scapy bs4 beautifulsoup4 tqdm
   ```

3. **بطء في الفحص**: قم بتقليل نطاق المنافذ أو زيادة عدد مسارات الفحص المتزامنة باستخدام `--threads`.

4. **مشاكل في الاتصال**: زيادة مهلة الاتصال باستخدام `-t` قد يساعد في حالة الشبكات البطيئة.

5. **عدم ظهور نتائج**: تأكد من أن الهدف متاح وأن المنافذ المحددة صحيحة.

## معلومات المطور

- **الاسم**: SayerLinux
- **البريد الإلكتروني**: SaudiSayer@gmail.com

## الترخيص

هذا المشروع مرخص تحت رخصة MIT.

---

شكراً لاستخدامك Nettacker! إذا كان لديك أي استفسارات أو اقتراحات، يرجى التواصل مع المطور.